// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class SafeTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SafeTransaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SafeTransaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SafeTransaction", id.toString(), this);
  }

  static load(id: string): SafeTransaction | null {
    return store.get("SafeTransaction", id) as SafeTransaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get safe(): Bytes {
    let value = this.get("safe");
    return value.toBytes();
  }

  set safe(value: Bytes) {
    this.set("safe", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get data(): Bytes {
    let value = this.get("data");
    return value.toBytes();
  }

  set data(value: Bytes) {
    this.set("data", Value.fromBytes(value));
  }

  get operation(): i32 {
    let value = this.get("operation");
    return value.toI32();
  }

  set operation(value: i32) {
    this.set("operation", Value.fromI32(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    return value.toBigInt();
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get fees(): BigInt | null {
    let value = this.get("fees");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fees(value: BigInt | null) {
    if (value === null) {
      this.unset("fees");
    } else {
      this.set("fees", Value.fromBigInt(value as BigInt));
    }
  }

  get feeToken(): Bytes | null {
    let value = this.get("feeToken");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set feeToken(value: Bytes | null) {
    if (value === null) {
      this.unset("feeToken");
    } else {
      this.set("feeToken", Value.fromBytes(value as Bytes));
    }
  }

  get feeReceiver(): Bytes | null {
    let value = this.get("feeReceiver");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set feeReceiver(value: Bytes | null) {
    if (value === null) {
      this.unset("feeReceiver");
    } else {
      this.set("feeReceiver", Value.fromBytes(value as Bytes));
    }
  }

  get success(): boolean {
    let value = this.get("success");
    return value.toBoolean();
  }

  set success(value: boolean) {
    this.set("success", Value.fromBoolean(value));
  }

  get reverted(): boolean {
    let value = this.get("reverted");
    return value.toBoolean();
  }

  set reverted(value: boolean) {
    this.set("reverted", Value.fromBoolean(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    return value.toBytes();
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }
}

export class SafeInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SafeInfo entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SafeInfo entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SafeInfo", id.toString(), this);
  }

  static load(id: string): SafeInfo | null {
    return store.get("SafeInfo", id) as SafeInfo | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    return value.toBigInt();
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }
}
